id: test-patch-must-have-spec
language: python

valid:
  # patch with new keyword parameter (explicit replacement)
  - |
    with patch('module.func', new=mock_func):
        pass
  - |
    @patch('module.Class', new=MockClass)
    def test_something():
        pass

  # patch with new_callable parameter
  - |
    with patch('module.func', new_callable=AsyncMock):
        pass
  - |
    @patch('module.Class', new_callable=MagicMock)
    def test_something():
        pass

  # patch with spec parameter
  - |
    with patch('module.func', spec=OriginalFunc):
        pass
  - |
    @patch('module.Class', spec=OriginalClass)
    def test_something():
        pass

  # patch with autospec parameter
  - |
    with patch('module.func', autospec=True):
        pass
  - |
    @patch('module.Class', autospec=True)
    def test_something():
        pass

  # patch with spec_set parameter
  - |
    with patch('module.func', spec_set=OriginalFunc):
        pass
  - |
    @patch('module.Class', spec_set=OriginalClass)
    def test_something():
        pass

  # patch with spec and other parameters
  - |
    with patch('module.func', spec=Foo, return_value=42):
        pass
  - |
    @patch('module.Class', autospec=True, return_value=None)
    def test_something():
        pass


invalid:
  # patch with only target (simple cases only)
  - |
    with patch('module.func'):
        pass
  - |
    @patch('module.Class')
    def test_something():
        pass
  - |
    def test_something():
        with patch('module.service'):
            pass

  # Multiple patches in decorator (first one bad)
  - |
    @patch('module.service')
    @patch('module.client', autospec=True)
    def test_something():
        pass

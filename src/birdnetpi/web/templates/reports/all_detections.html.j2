<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Species Detection Display</title>
    <link rel="stylesheet" href="{{ request.url_for('static', path='style.css') }}" />
    <style>
        /* Page-specific overrides and additions */

        /* Page title styling - secondary h1 after header */
        body > h1:nth-of-type(1) {
            font-size: 1.8rem;
            font-weight: normal;
            margin-top: 2rem;
            margin-bottom: 0.5rem;
            color: var(--color-text-emphasis);
        }

        .subtitle {
            font-size: 0.9rem;
            color: var(--color-text-secondary);
            margin-bottom: 1.5rem;
            font-style: italic;
        }

        /* Time selector - minimal, text-based */
        .time-selector {
            margin-bottom: 1.5rem;
            font-size: 0.85rem;
            border-bottom: 1px solid var(--color-border-tertiary);
            padding-bottom: 0.5rem;
        }

        .time-selector a {
            color: var(--color-text-secondary);
            text-decoration: none;
            margin-right: 1.5rem;
            transition: color 0.2s;
            cursor: pointer;
        }

        .time-selector a:hover {
            color: var(--color-text-emphasis);
        }

        .time-selector a.active {
            color: var(--color-text-emphasis);
            font-weight: bold;
        }

        /* Main grid with minimal separation */
        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        /* Sparkline container */
        .sparkline-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 0.5rem;
            margin-bottom: 2rem;
        }

        .species-sparkline {
            padding: 0.75rem;
            border-bottom: 1px solid var(--color-border-tertiary);
        }

        .species-sparkline:hover {
            background: var(--color-bg-tertiary);
        }

        .species-name {
            font-size: 0.9rem;
            margin-bottom: 0.25rem;
            display: flex;
            justify-content: space-between;
            align-items: baseline;
        }

        .scientific-name {
            font-style: italic;
            font-size: 0.8rem;
            color: var(--color-text-secondary);
        }

        .detection-count {
            font-size: 0.8rem;
            color: var(--color-text-emphasis);
            font-weight: normal;
        }

        /* Inline sparklines */
        .sparkline {
            height: 30px;
            width: 100%;
            display: flex;
            align-items: flex-end;
            gap: 1px;
            margin-top: 0.25rem;
        }

        .spark-bar {
            flex: 1;
            background: var(--color-text-secondary);
            min-height: 1px;
            transition: background 0.2s;
        }

        .spark-bar:hover {
            background: var(--color-text-emphasis);
        }

        /* Timeline using text and minimal marks */
        .timeline {
            font-size: 0.85rem;
            line-height: 1.6;
        }

        .timeline-header {
            font-weight: bold;
            margin-bottom: 0.5rem;
            padding-bottom: 0.25rem;
            border-bottom: 1px solid var(--color-border-primary);
        }

        .timeline-entry {
            display: grid;
            grid-template-columns: 60px 1fr 80px 60px;
            gap: 1rem;
            padding: 0.4rem 0;
            border-bottom: 1px dotted var(--color-input-border);
        }

        .timeline-entry:hover {
            background: var(--color-bg-tertiary);
        }

        .time {
            color: var(--color-text-secondary);
            font-size: 0.8rem;
        }

        .location {
            color: var(--color-text-secondary);
            font-size: 0.8rem;
            text-align: right;
        }

        .count {
            text-align: right;
            font-size: 0.8rem;
        }

        /* Data table following Tufte's principles */
        .data-table {
            width: 100%;
            font-size: 0.85rem;
            border-collapse: collapse;
            margin-top: 1.5rem;
        }

        .data-table th {
            text-align: left;
            font-weight: normal;
            padding: 0.5rem 0;
            border-bottom: 1px solid var(--color-border-primary);
            font-size: 0.8rem;
        }

        .data-table td {
            padding: 0.3rem 0;
            border-bottom: 1px dotted var(--color-border-secondary);
        }

        .data-table tr:hover {
            background: var(--color-bg-tertiary);
        }

        /* Small multiples grid */
        .small-multiples {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 0.5rem;
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--color-border-primary);
        }

        .small-multiple {
            text-align: center;
            padding: 0.5rem;
        }

        .small-multiple-title {
            font-size: 0.7rem;
            color: var(--color-text-secondary);
            margin-bottom: 0.25rem;
        }

        .mini-chart {
            height: 40px;
            display: flex;
            align-items: flex-end;
            justify-content: center;
            gap: 1px;
            margin: 0.5rem 0;
        }

        .mini-bar {
            width: 3px;
            background: #999;
        }

        .small-multiple-value {
            font-size: 0.8rem;
            color: #111;
        }

        /* Stem and leaf style display */
        .stem-leaf-display {
            font-family: 'Courier New', monospace;
            font-size: 0.8rem;
            line-height: 1.3;
            margin-top: 1.5rem;
            padding: 1rem;
            background: #f8f8f8;
            border-left: 2px solid #666;
        }

        .stem-leaf-row {
            display: flex;
            gap: 1rem;
        }

        .stem {
            width: 30px;
            text-align: right;
            color: #666;
        }

        .leaf {
            color: #111;
        }

        /* Annotation style */
        .annotation {
            font-size: 0.8rem;
            color: #666;
            font-style: italic;
            margin-top: 0.5rem;
            padding-left: 1rem;
            border-left: 2px solid #e0e0e0;
        }

        /* Summary statistics - inline text */
        .inline-stats {
            font-size: 0.85rem;
            color: #666;
            margin: 1rem 0;
            line-height: 1.6;
        }

        .stat-value {
            color: #111;
            font-weight: normal;
        }

        /* Remove all unnecessary visual elements */
        * {
            border-radius: 0;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }

            .timeline-entry {
                grid-template-columns: 50px 1fr 60px;
            }

            .location {
                display: none;
            }
        }
    </style>
</head>
<body>
    <header>
      <h1>BirdNET-Pi <span class="live" title="System Active"></span></h1>
      <p class="tagline">
        Continuous acoustic monitoring · {{ location | default('Location not set') }}
      </p>
    </header>

    <!-- Navigation -->
    {% set active_page = 'detections' %}
    {% include 'includes/navigation.html.j2' %}

    <h1>Species Detections</h1>
    <p class="subtitle">{{ location }} · {{ current_date }} · {{ species_count }} species active</p>

    <!-- Time period selector - minimal text links -->
    <div class="time-selector">
        Period:
        <a {% if period == 'day' %}class="active"{% endif %} onclick="switchPeriod('day', this)">Day</a>
        <a {% if period == 'week' %}class="active"{% endif %} onclick="switchPeriod('week', this)">Week</a>
        <a {% if period == 'month' %}class="active"{% endif %} onclick="switchPeriod('month', this)">Month</a>
        <a {% if period == 'season' %}class="active"{% endif %} onclick="switchPeriod('season', this)">Season</a>
        <a {% if period == 'year' %}class="active"{% endif %} onclick="switchPeriod('year', this)">Year</a>
        <a {% if period == 'historical' %}class="active"{% endif %} onclick="switchPeriod('historical', this)">Historical</a>
    </div>

    <!-- Inline statistics -->
    <div class="inline-stats">
        {{ period_label }}: <span class="stat-value">{{ today_species }}</span> species, <span class="stat-value">{{ today_detections }}</span> detections ·
        Peak activity: <span class="stat-value">{{ peak_activity_time }}</span> ({{ peak_detections }} detection{%- if peak_detections != 1 -%}s{%- endif -%}) ·
        {% if new_species %}New this {{ new_species_period }}: {% for species in new_species %}<span class="stat-value">{{ species }}</span>{% if not loop.last %}, {% endif %}{% endfor %}{% endif %}
    </div>

    <!-- Main content grid -->
    <div class="main-content">
        <!-- Timeline of recent detections -->
        <div class="timeline">
            <div class="timeline-header">
                All Detections
                <input type="text" id="search-input" placeholder="Search species..." style="margin-left: 1rem; padding: 0.2rem 0.5rem; border: 1px solid var(--color-input-border); font-size: 0.8rem;">
            </div>
            <div id="detections-list">
                <div style="text-align: center; color: var(--color-text-secondary); padding: 2rem;">Loading detections...</div>
            </div>
            <div id="pagination" style="text-align: center; margin-top: 1rem; font-size: 0.85rem;">
                <!-- Pagination controls will be added here -->
            </div>
        </div>

        <!-- Species frequency table -->
        <div>
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Species</th>
                        <th style="text-align: right">Today</th>
                        <th style="text-align: right">Week</th>
                        <th style="text-align: right">Month</th>
                    </tr>
                </thead>
                <tbody>
                    {% for species in species_frequency %}
                    <tr>
                        <td>{{ species.name }}</td>
                        <td style="text-align: right">{{ species.today }}</td>
                        <td style="text-align: right">{{ species.week }}</td>
                        <td style="text-align: right">{{ species.month }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <!-- Sparkline grid showing species activity patterns -->
    <div class="sparkline-grid">
        {% for species in top_species %}
        <div class="species-sparkline">
            <div class="species-name">
                <span>{{ species.common_name }}</span>
                <span class="detection-count">{{ species.count }}</span>
            </div>
            <div class="scientific-name">{{ species.scientific_name }}</div>
            <div class="sparkline" id="{{ species.id }}-spark"></div>
        </div>
        {% endfor %}
    </div>

    <!-- Small multiples showing weekly patterns -->
    <div class="small-multiples" id="weekly-patterns">
        {% for day in weekly_patterns %}
        <div class="small-multiple">
            <div class="small-multiple-title">{{ day.name }}</div>
            <div class="mini-chart" id="{{ day.id }}-chart"></div>
            <div class="small-multiple-value">{{ day.count }}</div>
        </div>
        {% endfor %}
    </div>

    <p class="annotation">
        Note: Detection confidence threshold ≥{{ confidence_threshold }}. Acoustic sensors calibrated weekly.
        {% if migration_note %}{{ migration_note }}{% endif %}
    </p>

    <script>
        // Generate sparklines
        function createSparkline(elementId, data) {
            const container = document.getElementById(elementId);
            if (!container) return;

            const max = Math.max(...data);
            data.forEach(value => {
                const bar = document.createElement('div');
                bar.className = 'spark-bar';
                bar.style.height = `${(value / max) * 100}%`;
                container.appendChild(bar);
            });
        }

        // Generate sparklines from data
        const sparklineData = {{ sparkline_data|tojson|safe }};
        Object.keys(sparklineData).forEach(id => {
            createSparkline(id, sparklineData[id]);
        });

        // Generate small multiples for weekly patterns
        const weekPatterns = {{ week_patterns_data|tojson|safe }};
        Object.keys(weekPatterns).forEach(id => {
            const container = document.getElementById(id);
            if (!container) return;

            const data = weekPatterns[id];
            const max = Math.max(...data);

            data.forEach(value => {
                const bar = document.createElement('div');
                bar.className = 'mini-bar';
                bar.style.height = `${(value / max) * 100}%`;
                container.appendChild(bar);
            });
        });

        // Time period switching
        function switchPeriod(period, element) {
            // Reload page with new period parameter
            window.location.href = `/reports/detections?period=${period}`;
        }

        // Detection loading with AJAX
        let currentPage = 1;
        let searchTerm = '';
        let searchTimeout = null;
        const currentPeriod = '{{ period }}';

        async function loadDetections(page = 1) {
            currentPage = page;
            const searchParams = new URLSearchParams({
                page: page,
                per_page: 20,
                period: currentPeriod,
                ...(searchTerm && { search: searchTerm })
            });

            try {
                const response = await fetch(`/api/detections/paginated?${searchParams}`);
                const data = await response.json();

                // Render detections
                const detectionsList = document.getElementById('detections-list');
                if (data.detections.length === 0) {
                    detectionsList.innerHTML = '<div style="text-align: center; color: var(--color-text-secondary); padding: 2rem;">No detections found</div>';
                } else {
                    detectionsList.innerHTML = data.detections.map(d => `
                        <div class="timeline-entry">
                            <span class="time">${d.timestamp}</span>
                            <span>${d.species}</span>
                            <span class="location">${d.date}</span>
                            <span class="count">${(d.confidence * 100).toFixed(0)}%</span>
                        </div>
                    `).join('');
                }

                // Render pagination
                const pagination = document.getElementById('pagination');
                let paginationHTML = '';

                if (data.pagination.total_pages > 1) {
                    paginationHTML = `
                        <span style="color: var(--color-text-secondary);">
                            Page ${data.pagination.page} of ${data.pagination.total_pages}
                            (${data.pagination.total} total detections)
                        </span><br>
                    `;

                    if (data.pagination.has_prev) {
                        paginationHTML += `<a href="#" onclick="loadDetections(1); return false;">« First</a> `;
                        paginationHTML += `<a href="#" onclick="loadDetections(${page - 1}); return false;">‹ Prev</a> `;
                    }

                    // Show page numbers
                    const startPage = Math.max(1, page - 2);
                    const endPage = Math.min(data.pagination.total_pages, page + 2);

                    for (let i = startPage; i <= endPage; i++) {
                        if (i === page) {
                            paginationHTML += `<span style="font-weight: bold;">${i}</span> `;
                        } else {
                            paginationHTML += `<a href="#" onclick="loadDetections(${i}); return false;">${i}</a> `;
                        }
                    }

                    if (data.pagination.has_next) {
                        paginationHTML += `<a href="#" onclick="loadDetections(${page + 1}); return false;">Next ›</a> `;
                        paginationHTML += `<a href="#" onclick="loadDetections(${data.pagination.total_pages}); return false;">Last »</a>`;
                    }
                } else if (data.pagination.total > 0) {
                    paginationHTML = `<span style="color: var(--color-text-secondary);">${data.pagination.total} detections</span>`;
                }

                pagination.innerHTML = paginationHTML;

            } catch (error) {
                console.error('Error loading detections:', error);
                document.getElementById('detections-list').innerHTML =
                    '<div style="text-align: center; color: var(--color-activity-low); padding: 2rem;">Error loading detections</div>';
            }
        }

        // Search functionality
        document.getElementById('search-input').addEventListener('input', function(e) {
            searchTerm = e.target.value;
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                loadDetections(1); // Reset to page 1 on search
            }, 300); // Debounce search
        });

        // Load initial detections
        loadDetections();
    </script>
</body>
</html>

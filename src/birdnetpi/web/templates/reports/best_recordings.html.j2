{% extends "base.html.j2" %}
{% set active_page = 'best' %}

{% block title %}Best Recordings - {{ site_name }}{% endblock %}

{% block styles %}
<style>
    /* Detection entry styles */
    .detection-entry {
        display: grid;
        grid-template-columns: 40px 1fr 120px 80px 80px 100px;
        gap: 1rem;
        padding: 0.75rem 0;
        border-bottom: 1px dotted var(--color-border-tertiary);
        align-items: center;
        font-size: 0.85rem;
    }

    .detection-entry:hover {
        background: var(--color-bg-hover-subtle);
    }

    /* Play button states */
    .play-button {
        width: 30px;
        height: 30px;
        border: 1px solid var(--color-border-primary);
        background: transparent;
        cursor: pointer;
        position: relative;
        padding: 0;
    }

    .play-button:disabled {
        opacity: 0.3;
        cursor: not-allowed;
    }

    .play-button.loading::after {
        content: '';
        position: absolute;
        left: 12px;
        top: 12px;
        width: 6px;
        height: 6px;
        background: var(--color-text-secondary);
        animation: pulse 1s infinite;
    }

    .play-button.playing::before {
        content: '■';
        font-size: 12px;
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
    }

    .play-button:not(.playing):not(.loading)::before {
        content: '▶';
        font-size: 10px;
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-40%, -50%);
    }

    /* Audio availability indicator */
    .audio-status {
        width: 30px;
        text-align: center;
        font-size: 0.7rem;
        color: var(--color-text-tertiary);
    }

    .audio-available {
        color: var(--color-text-secondary);
    }

    .audio-missing {
        color: var(--color-text-tertiary);
        font-style: italic;
    }

    /* Recording stats */
    .recording-stats {
        padding: 0.75rem 0;
        font-size: 0.85rem;
        color: var(--color-text-secondary);
        border-bottom: 1px solid var(--color-border-secondary);
        margin-bottom: 1rem;
    }

    .stat-value {
        font-weight: 500;
        color: var(--color-text-primary);
    }

    /* Recording controls */
    .recording-controls {
        padding: 1rem 0;
        display: flex;
        gap: 2rem;
        flex-wrap: wrap;
        align-items: center;
        border-bottom: 1px solid var(--color-border-secondary);
        margin-bottom: 1rem;
    }

    .filter-section {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        min-width: 200px;
    }

    .filter-label {
        font-size: 0.85rem;
        color: var(--color-text-secondary);
        font-weight: 500;
    }

    .filter-selector {
        background: var(--color-bg-secondary);
        border: 1px solid var(--color-border-primary);
        border-radius: 4px;
        padding: 0.5rem;
        font-size: 0.85rem;
        width: 100%;
        cursor: pointer;
    }

    .filter-selector:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .filter-clear {
        font-size: 0.75rem;
        color: var(--color-text-secondary);
        cursor: pointer;
        text-decoration: underline;
    }

    .filter-clear:hover {
        color: var(--color-text-primary);
    }

    /* Loading indicator */
    .loading-indicator {
        text-align: center;
        padding: 2rem;
        color: var(--color-text-secondary);
        font-size: 0.9rem;
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.3; }
    }

    /* No results message */
    .no-results {
        text-align: center;
        padding: 3rem 1rem;
        color: var(--color-text-tertiary);
        font-size: 0.9rem;
    }

    /* Active filters display */
    .active-filters {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
        margin-bottom: 1rem;
        font-size: 0.8rem;
    }

    .filter-tag {
        background: var(--color-bg-secondary);
        border: 1px solid var(--color-border-primary);
        border-radius: 3px;
        padding: 0.25rem 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .filter-tag-remove {
        cursor: pointer;
        color: var(--color-text-tertiary);
        font-weight: bold;
    }

    .filter-tag-remove:hover {
        color: var(--color-error);
    }
</style>
{% endblock %}

{% block content %}
<h2>Best Recordings</h2>

<div class="recording-stats" id="stats">
    <span>Loading statistics...</span>
</div>

<div class="recording-controls">
    <!-- Hierarchical taxonomic filters -->
    <div class="filter-section">
        <label class="filter-label">Family</label>
        <select class="filter-selector" id="family-filter" onchange="onFamilyChange()">
            <option value="">All families</option>
        </select>
    </div>

    <div class="filter-section">
        <label class="filter-label">Genus</label>
        <select class="filter-selector" id="genus-filter" onchange="onGenusChange()" disabled>
            <option value="">Select family first</option>
        </select>
    </div>

    <div class="filter-section">
        <label class="filter-label">Species</label>
        <select class="filter-selector" id="species-filter" onchange="onSpeciesChange()" disabled>
            <option value="">Select genus first</option>
        </select>
    </div>

    <div class="filter-section">
        <label class="filter-label">Min Confidence</label>
        <select class="filter-selector" id="confidence-filter" onchange="loadRecordings()">
            <option value="0.7">70%</option>
            <option value="0.8">80%</option>
            <option value="0.9">90%</option>
            <option value="0.95">95%</option>
        </select>
    </div>

    <div class="filter-section">
        <a class="filter-clear" onclick="clearAllFilters()">Clear all filters</a>
    </div>
</div>

<div class="active-filters" id="active-filters" style="display: none;">
</div>

<div id="detections-container">
    <div class="loading-indicator">Loading recordings...</div>
</div>

<script>
// State management
let currentFilters = {
    family: null,
    genus: null,
    species: null,
    minConfidence: 0.7
};

let currentRecordings = [];

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    loadFamilies();
    loadRecordings();
});

// Load available families
async function loadFamilies() {
    try {
        const response = await fetch('/api/detections/taxonomy/families?has_detections=true');
        const data = await response.json();

        const select = document.getElementById('family-filter');
        select.innerHTML = '<option value="">All families</option>';

        data.families.forEach(family => {
            const option = document.createElement('option');
            option.value = family;
            option.textContent = family;
            select.appendChild(option);
        });
    } catch (error) {
        console.error('Error loading families:', error);
    }
}

// Handle family selection
async function onFamilyChange() {
    const familySelect = document.getElementById('family-filter');
    const genusSelect = document.getElementById('genus-filter');
    const speciesSelect = document.getElementById('species-filter');

    currentFilters.family = familySelect.value || null;
    currentFilters.genus = null;
    currentFilters.species = null;

    if (currentFilters.family) {
        // Load genera for selected family
        genusSelect.disabled = false;
        genusSelect.innerHTML = '<option value="">Loading...</option>';

        try {
            const response = await fetch(`/api/detections/taxonomy/genera?family=${encodeURIComponent(currentFilters.family)}&has_detections=true`);
            const data = await response.json();

            genusSelect.innerHTML = '<option value="">All genera</option>';
            data.genera.forEach(genus => {
                const option = document.createElement('option');
                option.value = genus;
                option.textContent = genus;
                genusSelect.appendChild(option);
            });
        } catch (error) {
            console.error('Error loading genera:', error);
            genusSelect.innerHTML = '<option value="">Error loading genera</option>';
        }

        // Reset species selector
        speciesSelect.disabled = true;
        speciesSelect.innerHTML = '<option value="">Select genus first</option>';
    } else {
        // Reset both selectors
        genusSelect.disabled = true;
        genusSelect.innerHTML = '<option value="">Select family first</option>';
        speciesSelect.disabled = true;
        speciesSelect.innerHTML = '<option value="">Select genus first</option>';
    }

    loadRecordings();
}

// Handle genus selection
async function onGenusChange() {
    const genusSelect = document.getElementById('genus-filter');
    const speciesSelect = document.getElementById('species-filter');

    currentFilters.genus = genusSelect.value || null;
    currentFilters.species = null;

    if (currentFilters.genus) {
        // Load species for selected genus
        speciesSelect.disabled = false;
        speciesSelect.innerHTML = '<option value="">Loading...</option>';

        try {
            const params = new URLSearchParams({
                genus: currentFilters.genus,
                has_detections: true
            });
            if (currentFilters.family) {
                params.append('family', currentFilters.family);
            }

            const response = await fetch(`/api/detections/taxonomy/species?${params}`);
            const data = await response.json();

            speciesSelect.innerHTML = '<option value="">All species</option>';
            data.species.forEach(species => {
                const option = document.createElement('option');
                option.value = species.scientific_name;
                option.textContent = `${species.common_name} (${species.scientific_name})`;
                if (species.count) {
                    option.textContent += ` - ${species.count} detections`;
                }
                speciesSelect.appendChild(option);
            });
        } catch (error) {
            console.error('Error loading species:', error);
            speciesSelect.innerHTML = '<option value="">Error loading species</option>';
        }
    } else {
        // Reset species selector
        speciesSelect.disabled = true;
        speciesSelect.innerHTML = '<option value="">Select genus first</option>';
    }

    loadRecordings();
}

// Handle species selection
function onSpeciesChange() {
    const speciesSelect = document.getElementById('species-filter');
    currentFilters.species = speciesSelect.value || null;
    loadRecordings();
}

// Load recordings with current filters
async function loadRecordings() {
    const container = document.getElementById('detections-container');
    container.innerHTML = '<div class="loading-indicator">Loading recordings...</div>';

    // Update confidence filter
    const confidenceSelect = document.getElementById('confidence-filter');
    currentFilters.minConfidence = parseFloat(confidenceSelect.value);

    // Build query parameters
    const params = new URLSearchParams({
        min_confidence: currentFilters.minConfidence,
        limit: 100
    });

    if (currentFilters.species) {
        params.append('species', currentFilters.species);
    } else if (currentFilters.genus) {
        params.append('genus', currentFilters.genus);
    } else if (currentFilters.family) {
        params.append('family', currentFilters.family);
    }

    try {
        const response = await fetch(`/api/detections/best-recordings?${params}`);
        const data = await response.json();

        currentRecordings = data.recordings;

        // Update statistics
        updateStatistics(data);

        // Update active filters display
        updateActiveFilters();

        // Display recordings
        if (currentRecordings.length > 0) {
            displayRecordings(currentRecordings);
        } else {
            container.innerHTML = '<div class="no-results">No recordings found matching the selected filters.</div>';
        }
    } catch (error) {
        console.error('Error loading recordings:', error);
        container.innerHTML = '<div class="no-results">Error loading recordings. Please try again.</div>';
    }
}

// Update statistics display
function updateStatistics(data) {
    const statsDiv = document.getElementById('stats');
    statsDiv.innerHTML = `
        <span><span class="stat-value">${data.count}</span> recordings</span> ·
        <span><span class="stat-value">${data.unique_species}</span> species</span> ·
        <span>Average confidence: <span class="stat-value">${data.avg_confidence}%</span></span> ·
        <span>Date range: <span class="stat-value">${data.date_range}</span></span>
    `;
}

// Update active filters display
function updateActiveFilters() {
    const container = document.getElementById('active-filters');
    const filters = [];

    if (currentFilters.family) {
        filters.push(`<div class="filter-tag">
            Family: ${currentFilters.family}
            <span class="filter-tag-remove" onclick="removeFilter('family')">×</span>
        </div>`);
    }

    if (currentFilters.genus) {
        filters.push(`<div class="filter-tag">
            Genus: ${currentFilters.genus}
            <span class="filter-tag-remove" onclick="removeFilter('genus')">×</span>
        </div>`);
    }

    if (currentFilters.species) {
        filters.push(`<div class="filter-tag">
            Species: ${currentFilters.species}
            <span class="filter-tag-remove" onclick="removeFilter('species')">×</span>
        </div>`);
    }

    if (filters.length > 0) {
        container.style.display = 'flex';
        container.innerHTML = filters.join('');
    } else {
        container.style.display = 'none';
    }
}

// Display recordings
function displayRecordings(recordings) {
    const container = document.getElementById('detections-container');

    const html = recordings.map(recording => `
        <div class="detection-entry">
            <button class="play-button" onclick="playAudio('${recording.id}', this)" title="Play recording"></button>
            <div>
                <div style="font-weight: 500;">${recording.common_name || recording.scientific_name}</div>
                <div style="font-size: 0.8rem; color: var(--color-text-tertiary);">
                    <em>${recording.scientific_name}</em>
                </div>
                <div style="font-size: 0.7rem; color: var(--color-text-tertiary);">
                    ${recording.family} · ${recording.genus}
                </div>
            </div>
            <div>${recording.date}</div>
            <div>${recording.time}</div>
            <div style="text-align: right;">${recording.confidence}%</div>
            <div class="audio-status" id="audio-status-${recording.id}"></div>
        </div>
    `).join('');

    container.innerHTML = html;
}

// Remove a specific filter
function removeFilter(filterType) {
    if (filterType === 'family') {
        currentFilters.family = null;
        currentFilters.genus = null;
        currentFilters.species = null;
        document.getElementById('family-filter').value = '';
        onFamilyChange();
    } else if (filterType === 'genus') {
        currentFilters.genus = null;
        currentFilters.species = null;
        document.getElementById('genus-filter').value = '';
        onGenusChange();
    } else if (filterType === 'species') {
        currentFilters.species = null;
        document.getElementById('species-filter').value = '';
        loadRecordings();
    }
}

// Clear all filters
function clearAllFilters() {
    currentFilters = {
        family: null,
        genus: null,
        species: null,
        minConfidence: 0.7
    };

    document.getElementById('family-filter').value = '';
    document.getElementById('genus-filter').value = '';
    document.getElementById('genus-filter').disabled = true;
    document.getElementById('genus-filter').innerHTML = '<option value="">Select family first</option>';
    document.getElementById('species-filter').value = '';
    document.getElementById('species-filter').disabled = true;
    document.getElementById('species-filter').innerHTML = '<option value="">Select genus first</option>';
    document.getElementById('confidence-filter').value = '0.7';

    loadRecordings();
}

// Audio playback functionality
let currentAudio = null;
let currentButton = null;

function playAudio(detectionId, button) {
    // Stop current audio if playing
    if (currentAudio && currentButton) {
        currentAudio.pause();
        currentButton.classList.remove('playing');
    }

    // If clicking the same button, just stop
    if (currentButton === button) {
        currentAudio = null;
        currentButton = null;
        return;
    }

    // Start loading
    button.classList.add('loading');
    button.disabled = true;

    // Create audio element
    const audio = new Audio(`/audio/${detectionId}`);

    audio.addEventListener('canplay', () => {
        button.classList.remove('loading');
        button.classList.add('playing');
        button.disabled = false;
        audio.play();
    });

    audio.addEventListener('ended', () => {
        button.classList.remove('playing');
        currentAudio = null;
        currentButton = null;
    });

    audio.addEventListener('error', () => {
        button.classList.remove('loading');
        button.disabled = false;
        const statusDiv = document.getElementById(`audio-status-${detectionId}`);
        if (statusDiv) {
            statusDiv.classList.add('audio-missing');
            statusDiv.textContent = 'N/A';
        }
        alert('Audio file not available');
    });

    currentAudio = audio;
    currentButton = button;
}
</script>
{% endblock %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BirdNET-Pi Livestream (Client FFT)</title>
    <link rel="stylesheet" href="{{ request.url_for('static', path='style.css') }}">
    <style>
        /* Page-specific styles */
        .page-title {
            font-size: 1.8rem;
            font-weight: normal;
            margin-top: 2rem;
            margin-bottom: 0.5rem;
            color: var(--color-text-emphasis);
        }

        /* Spectrogram layout */
        .spectrogram-container {
            display: flex;
            gap: 10px;
            margin-top: 1rem;
            position: relative;
        }

        .freq-axis-container {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            width: 40px;
            padding-right: 5px;
            text-align: right;
            font-size: 0.75rem;
            color: #666;
        }

        .freq-axis-container span {
            line-height: 1;
        }

        .canvas-wrapper {
            flex: 1;
            position: relative;
        }

        .time-axis {
            display: flex;
            justify-content: space-between;
            margin-top: 5px;
            font-size: 0.75rem;
            color: #666;
        }

        .gradient-legend {
            width: 30px;
            margin-left: 10px;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .gradient-bar {
            flex: 1;
            background: linear-gradient(to top,
                #fffef0 0%,
                #ffff64 20%,
                #ffc832 40%,
                #ff9b00 60%,
                #ff0000 80%,
                #9b0000 100%);
            border: 1px solid #ccc;
            border-radius: 2px;
        }

        .gradient-labels {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            font-size: 0.7rem;
            color: #666;
            padding-left: 5px;
        }

        #spectrogramCanvas {
            border: 1px solid #ddd;
            display: block;
            width: 100%;
        }
    </style>
</head>
<body>
<header>
    <h1>BirdNET-Pi <span class="live" title="System Active"></span></h1>
    <p class="tagline">
        Continuous acoustic monitoring · {{ location | default('Location not set') }}
    </p>
</header>

<!-- Navigation -->
{% set active_page = 'livestream' %}
{% include 'includes/navigation.html.j2' %}

<!-- Page title -->
<h1 class="page-title">Live Audio Stream (Client-Side FFT)</h1>
<p class="subtitle">Real-time acoustic monitoring · 48 kHz sampling · Client-side processing</p>

<!-- Connection status -->
<div class="status-line">
    Audio: <span id="audioStatus" class="status-value status-inactive">Disconnected</span>
    ·
    Performance: <span id="performanceStatus" class="status-value">-- ms/frame</span> ·
    Updates: <span id="updateRate" class="status-value">0 Hz</span> ·
    Buffer: <span id="bufferSize" class="status-value">0 KB</span> ·
    <span style="color: var(--color-status-success);">● Single WebSocket</span>
</div>

<!-- Controls -->
<div class="controls">
    <div class="control-row">
        <button class="control-button" id="audioToggle" onclick="toggleAudio()">Connect Audio</button>
        <span class="control-label">Volume:</span>
        <input type="range" min="0" max="100" value="60"
               class="volume-slider"
               onchange="setVolume(this.value)">
        <span id="volumeValue" class="status-value">60%</span>

        <span class="control-label ml-2rem">FFT Size:</span>
        <select id="fftSize" onchange="updateFFTSize(this.value)">
            <option value="512">512</option>
            <option value="1024">1024</option>
            <option value="2048" selected>2048</option>
            <option value="4096">4096</option>
        </select>
    </div>
    <div class="control-row">
        <span class="control-label">Frequency max:</span>
        <input type="number" class="control-value" id="maxFreq" value="12000" min="1000"
               max="24000" step="500" onchange="updateFrequencyRange()"> Hz
        <span class="control-label ml-2rem">Time window:</span>
        <input type="number" class="control-value" id="timeWindow" value="10" min="5"
               max="60" step="5" onchange="updateTimeWindow()"> s
        <span class="control-label ml-2rem">Gain:</span>
        <input type="range" min="1" max="100" value="25"
               class="gain-slider"
               onchange="updateGain(this.value)">
    </div>
</div>

<!-- Main content -->
<div class="main-grid">
    <!-- Left column: Spectrogram and waveform -->
    <div>
        <!-- Spectrogram -->
        <div class="spectrogram-section">
            <h2 class="section-title">Spectrogram (Client-Side FFT)</h2>
            <div class="spectrogram-container">
                <div class="freq-axis-container">
                    <span id="maxFreqLabel">12k</span>
                    <span>9k</span>
                    <span>6k</span>
                    <span>3k</span>
                    <span>0</span>
                </div>
                <div class="canvas-wrapper">
                    <canvas id="spectrogramCanvas"></canvas>
                    <div class="time-axis">
                        <span id="timeStart">-10s</span>
                        <span>-7.5s</span>
                        <span>-5s</span>
                        <span>-2.5s</span>
                        <span>now</span>
                    </div>
                </div>
                <div class="gradient-legend">
                    <div style="font-size: 0.7rem; text-align: center; margin-bottom: 5px;">dB</div>
                    <div class="gradient-bar"></div>
                    <div class="gradient-labels">
                        <span>0</span>
                        <span>-20</span>
                        <span>-40</span>
                        <span>-60</span>
                    </div>
                </div>
            </div>
            <div class="inline-metrics">
                <div class="metric-item">FFT size: <span class="metric-value" id="fftSizeDisplay">2048</span>
                </div>
                <div class="metric-item">Resolution: <span class="metric-value" id="freqResolution">46.9 Hz</span></div>
                <div class="metric-item">Frame rate: <span class="metric-value"
                                                           id="frameRate">0 fps</span>
                </div>
                <div class="metric-item">Client CPU: <span class="metric-value" id="cpuUsage">0%</span>
                </div>
            </div>
        </div>

        <!-- Waveform -->
        <div class="waveform-container">
            <h2 class="section-title">Audio Waveform</h2>
            <canvas id="waveformCanvas"></canvas>
            <div class="inline-metrics">
                <div class="metric-item">Peak: <span class="metric-value" id="peakLevel">-∞ dB</span>
                </div>
                <div class="metric-item">RMS: <span class="metric-value" id="rmsLevel">-∞ dB</span>
                </div>
                <div class="metric-item">Samples: <span class="metric-value"
                                                        id="sampleCount">0</span></div>
            </div>
        </div>
    </div>

    <!-- Right column: Detection log -->
    <div class="detection-log">
        <div class="log-header">
            <span>Time</span>
            <span>Species</span>
            <span>Conf.</span>
        </div>
        <div id="detectionList">
            <div class="no-data">No detections yet</div>
        </div>
    </div>
</div>

<!-- Message log -->
<div class="message-log">
    <h2 class="section-title">System Log</h2>
    <div id="messageLog"></div>
</div>

<p class="annotation">
    WebSocket protocol · Binary PCM streaming · <strong>Client-side FFT via Web Audio API</strong> ·
    Detection threshold ≥0.70 · Zero server-side processing
</p>

<!-- Load livestream JavaScript -->
<script>
    // Set the AudioWorklet processor URL for the external script
    window.audioProcessorUrl = '{{ request.url_for("static", path="js/audio-processor.js") }}';
</script>
<script src="{{ url_for('static', path='js/livestream.js') }}"></script>

<script>
    // All livestream functionality has been moved to livestream.js
</script>
</body>
</html>

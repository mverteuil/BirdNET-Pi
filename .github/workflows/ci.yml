name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint_and_format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup uv
        uses: ./.github/actions/setup-uv
      - name: Cache pre-commit hooks
        id: cache-pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-
      - name: Install linting tools
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          curl -L https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 -o hadolint
          sudo mv hadolint /usr/local/bin/hadolint
          sudo chmod +x /usr/local/bin/hadolint
      - name: Create uv venv
        run: ~/.local/bin/uv venv
      - name: Install pre-commit
        run: ~/.local/bin/uv pip install pre-commit
      - name: Run pre-commit checks
        run: ~/.local/bin/uv run pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup uv
        uses: ./.github/actions/setup-uv
      - name: Create Docker network
        run: docker network create birdnetpi-network || true
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libportaudio2 portaudio19-dev pulseaudio gettext
          uv sync --all-extras
      - name: Cache BirdNET assets
        id: cache-assets
        uses: actions/cache@v4
        with:
          path: |
            data/models
            data/database
          key: ${{ runner.os }}-birdnet-assets-v2.2.0
          restore-keys: |
            ${{ runner.os }}-birdnet-assets-
      - name: Install BirdNET assets
        if: steps.cache-assets.outputs.cache-hit != 'true'
        env:
          BIRDNETPI_DATA: ${{ github.workspace }}/data
        run: |
          uv run install-assets install latest
      - name: Run pytest tests
        run: uv run pytest --cov=src --cov-fail-under=77 -m "not expensive"
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: .coverage

  test_expensive:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup uv
        uses: ./.github/actions/setup-uv
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libportaudio2 portaudio19-dev
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache BirdNET assets
        id: cache-assets
        uses: actions/cache@v4
        with:
          path: |
            data/models
            data/database
          key: ${{ runner.os }}-birdnet-assets-v2.2.0
          restore-keys: |
            ${{ runner.os }}-birdnet-assets-
      - name: Install BirdNET assets
        if: steps.cache-assets.outputs.cache-hit != 'true'
        env:
          BIRDNETPI_DATA: ${{ github.workspace }}/data
        run: |
          uv run install-assets install latest
      - name: Create test volume and populate with cached assets
        run: |
          docker volume create birdnet-test-data
          docker run --rm -v birdnet-test-data:/data -v ${{ github.workspace }}/data:/source alpine sh -c "cp -r /source/* /data/ 2>/dev/null || true"
      - name: Build Docker images
        env:
          BIRDNET_DATA_VOLUME: birdnet-test-data
        run: docker compose build --parallel
      - name: Install minimal dependencies
        run: uv sync
      - name: Run expensive pytest tests
        run: uv run pytest -m "expensive"
